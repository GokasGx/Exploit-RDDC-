using System;
using System.Net;
using EzC;
using System.IO;
using static System.Console;
using static Shortcuts;
using LightCream;
public class Program
{
    private static string version = "1.2";
    private ISupp MySupp;
    public OptionSelector Options;
    public static void Main(string[] args) => new Program().Start(false); 
    public void Start(bool firstRun = false)
    {
        UpdateApplication();
        firstRun = true;
        if (firstRun)
        {
            Clear();
            ForegroundColor = ConsoleColor.White;
            WriteLine("=RDDC=\n\n");
            Write("Creadores: ");
            ForegroundColor = ConsoleColor.Cyan;
            WriteLine("@Gok, @Sopas");
            ForegroundColor = ConsoleColor.White;
            Write("[");
            ForegroundColor = ConsoleColor.Red;
            Write("WARN");
            ForegroundColor = ConsoleColor.White;
            Write("]: Este exploit es solo de paga, si lo tienes sin necesidad de comprarlo, no somos responsables de las consecuencias :)");
            WriteLine("\n-");
            WriteLine("\nPresiona una tecla para continuar\n");
            ReadKey();
        }
        Options = new OptionSelector(new string[]{"IP", "Roblox", "Discord"}, "Exploit RDDC");
                Options.Description = "";
        string selected = Options.Select( );
        switch (selected)
        {
            case "IP":
                IP();
                break;
            case "Roblox":
                Roblox();
                break;
            case "Discord":
                Discord();
                break;
        }
    }
    private void IP()
    {
        Options.AddOptions(new string[]{ "IPLookUp", "CheckPorts", "Send Packets" , "Home" }, "Supp IP seleccionado, selecciona una opción");
        string selected = Options.Select();
        Write(selected);
        switch (selected)
        {
            case "IPLookUp":
                MySupp = new IPSupp( Input("Escribe la IP:") );
                (MySupp as IPSupp).Lookup();
                WriteLine("-");
                WriteLine("Presiona cualquier tecla para continuar.");
                Console.ReadKey();
                Start();
                MySupp.Dispose();
                break;
            case "CheckPorts":
                MySupp = new IPSupp ( Input("Escribe la IP:") );
                (MySupp as IPSupp).CheckPortsTCP();
                WriteLine("-");
                WriteLine("Presiona cualquier tecla para continuar.");
                Console.ReadKey();
                Start();
                MySupp.Dispose();
                break;
            case "Send Packets":
                MySupp = new IPSupp ( Input("Escribe la IP: ") );
                (MySupp as IPSupp).SendPacket();
                WriteLine("-");
                WriteLine("Presiona cualquier tecla para continuar.");
                Console.ReadKey();
                Start();
                break;
            case "Home":
                Start();
                return;
        }
    }
    public void Roblox()
    {
        Options.AddOptions(new string[]{ "Attach", "Execute", "Kill Roblox", "Home" }, "Supp Roblox seleccionado, selecciona una opción\n");
        string selected = Options.Select();
        Write(selected);
        switch (selected)
        {
            case "Attach":
                RobloxSupp.AttachAPI();
                break;

            case "":
                Discord();
                break;
            case "Home":
                Start();
                return;
        }
    
    }
    public void Discord()
    {
        Options.AddOptions(new string[]{ "Webhooks", "Bot", "User", "Home" }, "Supp Discord seleccionado, selecciona una opción\n");
        string selected = Options.Select();
        Write(selected);
        switch (selected)
        {
            case "Webhooks":
                WriteLine("");
                WriteLine("\nParametros: string msg, string wbhkURL");
                CMDLog("Escribe el primer parametro: string msg");
                string msg = Console.ReadLine();
                CMDLog("Escribe el segundo parametro: string wbhkURL");
                string wbhk = Console.ReadLine();
                InfoLog("Enviando webhooks...");
                try
                {
                }
                catch (Exception e)
                {
                    ERRORLog(e);
                    InfoLog("Presione cualquier tecla para continuar.");
                    ReadKey();
                    Discord();
                }
                InfoLog("WebHook enviada. Presione cualquier tecla para continuar.");
                ReadKey();
                Discord();
                break;

            case "Bot":
                DiscordSupp.Bot();
                break;
            case "Home":
                Start();
                return;
        }
    }
    public static void InfoLog(object msg)
    {
            Write("[");
            ForegroundColor = ConsoleColor.Green;
            Write("INFO");
            ForegroundColor = ConsoleColor.White;
            Write("]: " + msg + "\n");
    }
    public static void ERRORLog(object msg)
    {
            Write("[");
            ForegroundColor = ConsoleColor.DarkRed;
            Write("ERROR");
            ForegroundColor = ConsoleColor.White;
            Write("]: " + msg + "\n");
    }

    public static void CMDLog(object msg)
    {
            Write("[");
            ForegroundColor = ConsoleColor.Yellow;
            Write("CMD");
            ForegroundColor = ConsoleColor.White;
            Write("]: " + msg + "\n");
    }
    public static void UpdateApplication()
    {
        Clear();
        InfoLog("Checking version...");
            Console.Title = $"Exploit - RDDC | v{version}";
        Console.Title = "Exploit - RDDC | Checking version...";
        if (NetworkCream.UpdateCompare(version, "https://pastebin.com/raw/h4VPCXFr"))
        {
            string versionToUpdate = string.Empty;
            using (var client = new WebClient())
            {
                versionToUpdate = client.DownloadString("https://pastebin.com/raw/h4VPCXFr");
                InfoLog($"RDDC Old version: v{version}");
                InfoLog($"Pending update: v{versionToUpdate}");
                InfoLog("Updating...");
                Console.Title = $"Exploit - RDDC | Updating... (v{version})";
                client.DownloadFile("https://github.com/GokasGx/Exploit-RDDC-/raw/main/Boostraper/Boostraper.exe", "Boostraper.exe");
                client.DownloadFile("https://github.com/GokasGx/Exploit-RDDC-/raw/main/Boostraper/Boostraper.dll", "Boostraper.dll");
                System.Diagnostics.Process.Start(Path.Combine(Environment.CurrentDirectory, "Boostraper.exe"));
                Environment.Exit(0);
            }
        }
        else
        {
            InfoLog("Updated!");
            Console.Title = $"Exploit - RDDC | v{version}";
            var launcher = Path.Combine(Environment.CurrentDirectory, "Boostraper.exe");
            var launcherDll = Path.Combine(Environment.CurrentDirectory, "Boostraper.dll");
            if (File.Exists(launcher))
            {
                File.Delete(launcher);
            }
            if (File.Exists(launcherDll))
            {
                File.Delete(launcherDll);
            }
            ReadKey();
        }
    }
}
