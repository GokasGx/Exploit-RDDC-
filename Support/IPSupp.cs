using System;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Net.Http;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Collections.Generic;
using System.Diagnostics;
using static System.Console;
public class IPSupp : ISupp
{
    private HttpClient Client;
    public string TargetIP;
    public IPSupp(string IP)
    {
        TargetIP = IP;
        Client = new HttpClient();
    }
    public void Lookup()
    {
        string webResponse = Client.GetStringAsync( string.Format("https://api-ip.info/api/InfoIP/json/{0}", TargetIP) ).GetAwaiter().GetResult();
        
        //Procesamiento choto del json para que no se buguee
        webResponse = JsonObject.Parse(webResponse)["multiserviciosweb"]["response"].ToString();

        var d = JsonSerializer.Deserialize<Dictionary<string, object>>(webResponse);
        
        foreach (var kvp in d)
        {
            ForegroundColor = ConsoleColor.Green;
            Write(kvp.Key + ": ");
            ForegroundColor = ConsoleColor.White;
            if (kvp.Value != null)
                WriteLine(kvp.Value.ToString());
            else
                WriteLine("NULL");
        }
    }
    public void CheckPortsTCP()
    {
        Program.CMDLog("Enter the starPort parameter of type int");
        int startPort = Convert.ToInt32(Console.ReadLine());
        Program.CMDLog("Enter the endPort parameter of type int");
        int endPort = Convert.ToInt32(Console.ReadLine());
        for (int port = startPort; port <= endPort; port++)
        {
            try
            {
                TcpClient client = new TcpClient();
                client.Connect(TargetIP, port);
                Program.InfoLog($"Puerto {port} abierto");
                client.Close();
            }
            catch
            {
                Program.InfoLog($"Puerto {port} cerrado");
            }
        }
    }
    public void SendPacket()
    {
        
        Program.CMDLog("Enter the packetSize parameter of type int");
        int packetSize = Convert.ToInt32(Console.ReadLine());
        Program.CMDLog("Enter the port parameter of type int");
        int port = Convert.ToInt32(Console.ReadLine());
        Program.CMDLog("Enter the loop parameter of type int");
        int loop = Convert.ToInt32(Console.ReadLine());
        IPEndPoint remoteEndPoint = new IPEndPoint(IPAddress.Parse(TargetIP), port);
        Socket sender = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
        byte[] data = new byte[packetSize * 1024];
        Stopwatch stopwatch = new Stopwatch();
        for (int i = 0; i < loop; i++)
        {
            try 
            {
                sender.SendTo(data, remoteEndPoint);
                double vel = (double) 1024 / stopwatch.Elapsed.TotalSeconds;
                Program.InfoLog($"package sent. Timeout [{sender.SendTimeout}ms]");
                Program.InfoLog($"Time elapsed: {stopwatch.Elapsed.TotalSeconds} seconds");
                Program.InfoLog($"Response speed: {vel / 1000} KB/s");
            }
            catch
            {
                loop = 0;
                Program.ERRORLog("package not sent");
            }
        }
        sender.Close();
    }
    public void Dispose()
    {
        Client.Dispose();
    }
}